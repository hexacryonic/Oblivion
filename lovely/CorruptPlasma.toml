[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Instability flame handler (btw i just yoinked this all from math lmao)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''for k, v in pairs(G.ARGS.flame_handler) do'''
position = "before"
payload = '''
G.C.UI_INSTLICK = G.C.UI_INSTLICK or {1, 1, 1, 1}
for i=1, 3 do
    G.C.UI_INSTLICK[i] = math.min(math.max(((G.C.UI_INST[i]*0.5+G.C.PURPLE[i]*0.5) + 0.1)^2, 0.1), 1)
end
G.ARGS.flame_handler.inst = {
    id = 'flame_inst',
    arg_tab = 'inst_flames',
    colour = G.C.UI_INST,
    accent = G.C.UI_INSTLICK
}
'''
match_indent = true

# Add inst to hand_text_area
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''check_and_set_high_score('most_money', G.GAME.dollars)'''
position = "before"
payload = '''G.hand_text_area.inst = self.HUD:get_UIE_by_ID('hand_inst')'''
match_indent = true

# update_hand_text on inst
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if vals.handname and G.GAME.current_round.current_hand.handname ~= vals.handname then'''
position = "before"
payload = '''
if vals.inst and G.GAME.current_round.current_hand.inst ~= vals.inst then
    local delta = (type(vals.inst) == 'number' and type(G.GAME.current_round.current_hand.inst) == 'number')and (vals.inst - G.GAME.current_round.current_hand.inst) or 0
    if delta < 0 then delta = ''..delta; col = G.C.RED
    elseif delta > 0 then delta = '+'..delta
    else delta = ''..delta
    end
    if type(vals.inst) == 'string' then delta = vals.inst end
    G.GAME.current_round.current_hand.inst = vals.inst
    G.hand_text_area.inst:update(0)
    if vals.StatusText then
        attention_text({
            text =delta,
            scale = 0.8,
            hold = 1,
            cover = G.hand_text_area.inst.parent,
            cover_colour = mix_colours(G.C.INST, col, 0.1),
            emboss = 0.05,
            align = 'cm',
            cover_align = 'cl'
        })
    end
    if not G.TAROT_INTERRUPT then G.hand_text_area.inst:juice_up() end
end'''
match_indent = true

# add inst to current_hand table
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''mult_text = '0','''
position = "after"
payload = '''inst = ((G.GAME and G.GAME.instability) or 1),
inst_text = 'inst','''
match_indent = true

# add inst (real)
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''hand_chips = mod_chips(G.GAME.hands[text].chips)'''
position = "after"
payload = '''inst = ((G.GAME and G.GAME.instability) or 1)'''
match_indent = true

# inst UI (very real)
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if modded then update_hand_text({sound = 'chips2', modded = modded}, {chips = hand_chips, mult = mult}) end'''
position = "at"
payload = '''if modded then update_hand_text({sound = 'chips2', modded = modded}, {chips = hand_chips, mult = mult, inst = ((G.GAME and G.GAME.instability) or 1)}) end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''update_hand_text({delay = 0}, {chips = hand_chips, mult = mult})'''
position = "at"
payload = '''update_hand_text({delay = 0}, {chips = hand_chips, mult = mult, inst = ((G.GAME and G.GAME.instability) or 1)})'''
match_indent = true

# inst functionality (the realest)
[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = '''hand_chips\*mult'''
position = "at"
payload = '''(hand_chips*mult)^((G.GAME and G.GAME.instability) or 1)'''

# more update_hand_text patches for inst
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({immediate = true, nopulse = true, delay = 0}, {mult = 0, chips = 0, level = '', handname = ''})'''
position = "at"
payload = '''update_hand_text({immediate = true, nopulse = true, delay = 0}, {mult = 0, chips = 0, inst = ((G.GAME and G.GAME.instability) or 1), level = '', handname = ''})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, handname = '', level = ''})'''
position = "at"
payload = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, inst = ((G.GAME and G.GAME.instability) or 1), handname = '', level = ''})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, handname = '', level = ''})'''
position = "at"
payload = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, inst = ((G.GAME and G.GAME.instability) or 1), handname = '', level = ''})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize('k_all_hands'),chips = '...', mult = '...', level=''})'''
position = "at"
payload = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize('k_all_hands'),chips = '...', mult = '...', inst = ((G.GAME and G.GAME.instability) or 1), level=''})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(self.ability.consumeable.hand_type, 'poker_hands'),chips = G.GAME.hands[self.ability.consumeable.hand_type].chips, mult = G.GAME.hands[self.ability.consumeable.hand_type].mult, level=G.GAME.hands[self.ability.consumeable.hand_type].level})'''
position = "at"
payload = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(self.ability.consumeable.hand_type, 'poker_hands'),chips = G.GAME.hands[self.ability.consumeable.hand_type].chips, mult = G.GAME.hands[self.ability.consumeable.hand_type].mult, inst = ((G.GAME and G.GAME.instability) or 1), level=G.GAME.hands[self.ability.consumeable.hand_type].level})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(text, 'poker_hands'),chips = G.GAME.hands[text].chips, mult = G.GAME.hands[text].mult, level=G.GAME.hands[text].level})'''
position = "at"
payload = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(text, 'poker_hands'),chips = G.GAME.hands[text].chips, mult = G.GAME.hands[text].mult, inst = ((G.GAME and G.GAME.instability) or 1), level=G.GAME.hands[text].level})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname='????', level='?', mult = '?', chips = '?'})'''
position = "at"
payload = '''update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname='????', level='?', mult = '?', chips = '?', inst = ((G.GAME and G.GAME.instability) or 1)})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips})'''
position = "at"
payload = '''update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips, inst = ((G.GAME and G.GAME.instability) or 1)})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '''mult = G.GAME.hands[self.ability.orbital_hand].mult,'''
position = "after"
payload = '''inst = ((G.GAME and G.GAME.instability) or 1),'''
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '''update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips})'''
position = "at"
payload = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, inst = ((G.GAME and G.GAME.instability) or 1), handname = '', level = ''})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''update_hand_text({immediate = true, nopulse = true, delay = 0}, {mult = 0, chips = 0, level = '', handname = ''})'''
position = "at"
payload = '''update_hand_text({immediate = true, nopulse = true, delay = 0}, {mult = 0, chips = 0, inst = ((G.GAME and G.GAME.instability) or 1), level = '', handname = ''})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''delay = G.GAME.current_round.current_hand.handname ~= disp_text and 0.4 or 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips})'''
position = "at"
payload = '''delay = G.GAME.current_round.current_hand.handname ~= disp_text and 0.4 or 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips, inst = ((G.GAME and G.GAME.instability) or 1)})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, chip_total = math.floor(hand_chips*mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)'''
position = "at"
payload = '''func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, inst = ((G.GAME and G.GAME.instability) or 1), chip_total = math.floor(hand_chips*mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)'''
match_indent = true

# inst flames check
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''G.ARGS.score_intensity.earned_score = G.GAME.current_round.current_hand.chips*G.GAME.current_round.current_hand.mult'''
position = "at"
payload = '''G.ARGS.score_intensity.earned_score = (G.GAME.current_round.current_hand.chips*G.GAME.current_round.current_hand.mult)^G.GAME.current_round.current_hand.inst'''
match_indent = true

# Make chip and mult stay at the current scale
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''e.config.object.scale = scale_number(G.GAME.current_round.current_hand.mult, 0.9, 1000)'''
position = "at"
payload = '''e.config.object.scale = scale_number(G.GAME.current_round.current_hand.mult, G.GAME.in_corrupt_plasma and 0.69 or 0.9, 1000)'''
match_indent = true

# Make chip and mult stay at the current scale
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''e.config.object.scale = scale_number(G.GAME.current_round.current_hand.chips, 0.9, 1000)'''
position = "at"
payload = '''e.config.object.scale = scale_number(G.GAME.current_round.current_hand.chips, G.GAME.in_corrupt_plasma and 0.69 or 0.9, 1000)'''
match_indent = true
