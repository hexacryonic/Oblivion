[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Turn Jimbo into THE SHOW NEVER ENDS
[[patches]]
[patches.pattern]
target = "card_character.lua"
pattern = 'self.children.card = Card(self.T.x, self.T.y, G.CARD_W, G.CARD_H, G.P_CARDS.empty, args.center or G.P_CENTERS.j_joker, {bypass_discovery_center = true})'
position = "at"
payload = 'self.children.card = Card(self.T.x, self.T.y, G.CARD_W, G.CARD_H, G.P_CARDS.empty, args.center or G.P_CENTERS.j_ovn_showneverends, {bypass_discovery_center = true})'
match_indent = true

[[patches]]
[patches.pattern]
target = "card_character.lua"
pattern = 'colours = {G.C.RED, G.C.BLUE, G.C.ORANGE},'
position = "at"
payload = '''colours = {G.C.RARITY['ovn_corrupted'], G.C.BLUE, G.C.PURPLE},'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "local replace_card = Card(self.title_top.T.x, self.title_top.T.y, 1.2*G.CARD_W*SC_scale, 1.2*G.CARD_H*SC_scale, G.P_CARDS.S_A, G.P_CENTERS.c_base)"
position = "at"
payload = '''
local replace_card = Card(self.title_top.T.x, self.title_top.T.y, 1.2*G.CARD_W*SC_scale, 1.2*G.CARD_H*SC_scale, G.P_CARDS['ovn_O'..'_'..'A'], G.P_CENTERS.c_base)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "{name = 'colour_1', ref_table = G.C, ref_value = 'RED'},"
position = "at"
payload = '''
{name = 'colour_1', ref_table = G.C, ref_value = 'PURPLE'},
'''
match_indent = true


[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])"
position = "at"
payload = '''
local replace = {}
			for _, v in pairs(Oblivion.corruption_map) do
				if G.P_CENTERS[v] then
					replace[#replace + 1] = v
				end
			end
 		local option = math.random(#replace)
   		local chosenoption = replace[option]
SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS[chosenoption],{bypass_discovery_center = true, bypass_discovery_ui = true})
'''
match_indent = true

# Optics' base chips are doubled
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if initial then self.base.original_value = self.base.value end
'''
position = "after"
payload = '''
if self.base.suit == 'ovn_Optics' then self.ability.bonus = self.base.nominal end
'''
match_indent = true

# ----

# Show tooltips
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "for _, v in ipairs(info_queue) do"
position = "before"
payload = '''for k, _ in pairs(Oblivion.corruption_map) do
  if _c.key == k then
    info_queue[#info_queue+1] = {key = 'ovn_corruptible', set = 'Other'}
  end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''if #G.hand.highlighted <= 0 or G.GAME.blind.block_play or #G.hand.highlighted > 5 then
    e.config.colour = G.C.UI.BACKGROUND_INACTIVE
    e.config.button = nil
else
    e.config.colour = G.C.BLUE
    e.config.button = 'play_cards_from_highlighted'
end'''
position = "after"
payload = '''
if #G.hand.highlighted >= 1 then
  for i=1, #G.hand.highlighted do
    if G.hand.highlighted[i].config.center.key == 'm_ovn_unob' then
      e.config.colour = G.C.UI.BACKGROUND_INACTIVE
      e.config.button = nil
    end
  end
end
'''
match_indent = true

# Corrupt background
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif G.GAME.won then
    ease_background_colour{new_colour = G.C.BLIND.won, contrast = 1}
elseif blindname == 'Small Blind' or blindname == 'Big Blind' or blindname == '' then
    ease_background_colour{new_colour = G.C.BLIND['Small'], contrast = 1}
'''
position = "at"
payload = '''elseif G.GAME.won and G.GAME.in_corrupt then
    ease_background_colour{new_colour = G.ARGS.LOC_COLOURS.ovn_corrupt2, contrast = 1}
elseif (blindname == 'Small Blind' or blindname == 'Big Blind' or blindname == '') and G.GAME.in_corrupt then
    ease_background_colour{new_colour = G.ARGS.LOC_COLOURS.ovn_corrupt1, contrast = 1}
elseif G.GAME.won and not G.GAME.in_corrupt then
    ease_background_colour{new_colour = G.C.BLIND.won, contrast = 1}
elseif (blindname == 'Small Blind' or blindname == 'Big Blind' or blindname == '') and not G.GAME.in_corrupt then
    ease_background_colour{new_colour = G.C.BLIND['Small'], contrast = 1}
'''
match_indent = true

# Joker banishing, inspired by Cryptid
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v.yes_pool_flag and not G.GAME.pool_flags[v.yes_pool_flag] then add = nil end"
position = "after"
payload = "if Oblivion.f.is_corruptbanished(v.key) then add = nil end"
match_indent = true